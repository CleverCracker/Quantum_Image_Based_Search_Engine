
# Quantum Image Based Search Engine

Quantum Image-Based Search Engine is a Algorithm which compare image using Quantum. In this algo FRQI Image representation algorithm is used for image. 


# Goals
The aim of the project is to develop a Python-based module to perform image matching using quantum computing tools (Qiskit). As an inital approach, the image matching process has been divided into the following tasks:

1. Classical image preparation 
2. Quantum encoding
3. Quantum image matching

# Proposed Implementation

- **Step 1: Image Preparation**
This step involves preparing the inital images to adapt our problem to the scope of the hackathon by:
   - changing from RGB to grayscale format
   - cropping the image to a square
   - reducing the resolution to 32 x 32 pixels (this will later mean using 24 qubits in our computation, with the current limit of the qasm simulator being 32 quibts)
   - centering the city within the image (using centroid)
   - discarding particularly challenging pictures: those that are cropped, taken from a strange perspective.... 

This is step involves Python classical image processing libraries such as PIL, OpenCV, etc. together with self developed functions.

- **Step 2: Quantum Encoding**
The quantum encoding or Quantum Image Representation (QImR) step involves the transformation of the data from a classical to a quantum image representation model [1]. The chosen quantum representation model is key to determine the types of processing tasks and how well they can be performed. After studying different proposals such as NEQR [2], in order to develop our MVP, we have selected to apply Flexible Representation of Quantum Images (FRQI) [3]. This allows us to encode an image of size *m = n x n* (pixels) into *log2(m)* qubits. One of the drawbacks of this representation is the requirement of *m* gates to perform the encoding of such an image.

- **Step 3: Quantum Image Matching**
Image matching involves finding similarities between images. These similiarties range from pixel to pixel differences to morphological properties. The qubits used to encode both the test and reference images represent the density matrices for each image. These density matrices can then be compared via a quantum based similarity test. Specifically, this involves a standard SWAP test [6]. 

# Framework
- Language: Python
- Quantum API: Qiskit
- Backend: ibmq_qasm_simulator

# Tools
- Anaconda
- Visual Studio Code

## Installation
Use the package manager [pip](https://pip.pypa.io/en/stable/) to install requirements.txt.

```bash
pip install -r requirement.txt
```
OR
```bash
pip install qiskit
pip install pillow
pip install python-resize-image
```

# References
- [1] https://arxiv.org/pdf/1801.01465.pdf
- [2] https://arxiv.org/pdf/1812.11042.pdf
- [3] https://www.jstage.jst.go.jp/article/fss/25/0/25_0_185/_pdf
- [4] https://www.researchgate.net/publication/333585825_Quantum_Image_Edge_Detection_Algorithm
- [5] https://pdfs.semanticscholar.org/b1d1/e8a9d6173458687bdfdc5a654423444f15b0.pdf
- [6] https://arxiv.org/abs/1803.04114